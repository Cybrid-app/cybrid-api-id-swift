//
// InternalOrganizationApplicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class InternalOrganizationApplicationAPI : NSObject {

    /**
     Create organization application
     
     - parameter postInternalOrganizationApplicationIdpModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func internalCreateOrganizationApplications(postInternalOrganizationApplicationIdpModel: PostInternalOrganizationApplicationIdpModel, apiResponseQueue: DispatchQueue = CybridApiIdpSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ApplicationWithSecretIdpModel, ErrorResponse>) -> Void)) -> RequestTask {
        return internalCreateOrganizationApplicationsWithRequestBuilder(postInternalOrganizationApplicationIdpModel: postInternalOrganizationApplicationIdpModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create organization application
     - POST /api/internal/applications
     - Create an organization OAuth2 application.  Required scope: **internal:organizations:execute**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postInternalOrganizationApplicationIdpModel: (body)  
     - returns: RequestBuilder<ApplicationWithSecretIdpModel> 
     */
    open class func internalCreateOrganizationApplicationsWithRequestBuilder(postInternalOrganizationApplicationIdpModel: PostInternalOrganizationApplicationIdpModel) -> RequestBuilder<ApplicationWithSecretIdpModel> {
        let localVariablePath = "/api/internal/applications"
        let localVariableURLString = CybridApiIdpSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInternalOrganizationApplicationIdpModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationWithSecretIdpModel>.Type = CybridApiIdpSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
