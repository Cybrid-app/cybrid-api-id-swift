//
// BankApplicationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

@objc open class BankApplicationsAPI : NSObject {

    /**
     Create bank application
     
     - parameter postBankApplicationIdpModel: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func createBankApplication(postBankApplicationIdpModel: PostBankApplicationIdpModel, apiResponseQueue: DispatchQueue = CybridApiIdpSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ApplicationWithSecretIdpModel, ErrorResponse>) -> Void)) -> RequestTask {
        return createBankApplicationWithRequestBuilder(postBankApplicationIdpModel: postBankApplicationIdpModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Create bank application
     - POST /api/bank_applications
     - Creates a bank OAuth2 application.  Required scope: **banks:write**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter postBankApplicationIdpModel: (body)  
     - returns: RequestBuilder<ApplicationWithSecretIdpModel> 
     */
    open class func createBankApplicationWithRequestBuilder(postBankApplicationIdpModel: PostBankApplicationIdpModel) -> RequestBuilder<ApplicationWithSecretIdpModel> {
        let localVariablePath = "/api/bank_applications"
        let localVariableURLString = CybridApiIdpSwiftAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postBankApplicationIdpModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationWithSecretIdpModel>.Type = CybridApiIdpSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List bank applications
     
     - parameter page: (query) The page index to retrieve. (optional)
     - parameter perPage: (query) The number of entities per page to return. (optional)
     - parameter bankGuid: (query) Bank guid to list applications for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    @discardableResult
    open class func listBankApplications(page: String? = nil, perPage: String? = nil, bankGuid: String? = nil, apiResponseQueue: DispatchQueue = CybridApiIdpSwiftAPI.apiResponseQueue, completion: @escaping ((_ result: Swift.Result<ApplicationListIdpModel, ErrorResponse>) -> Void)) -> RequestTask {
        return listBankApplicationsWithRequestBuilder(page: page, perPage: perPage, bankGuid: bankGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(.success(response.body))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List bank applications
     - GET /api/bank_applications
     - Retrieve a list of bank OAuth2 applications.  Required scope: **banks:read**
     - BASIC:
       - type: http
       - name: BearerAuth
     - OAuth:
       - type: oauth2
       - name: oauth2
     - parameter page: (query) The page index to retrieve. (optional)
     - parameter perPage: (query) The number of entities per page to return. (optional)
     - parameter bankGuid: (query) Bank guid to list applications for. (optional)
     - returns: RequestBuilder<ApplicationListIdpModel> 
     */
    open class func listBankApplicationsWithRequestBuilder(page: String? = nil, perPage: String? = nil, bankGuid: String? = nil) -> RequestBuilder<ApplicationListIdpModel> {
        let localVariablePath = "/api/bank_applications"
        let localVariableURLString = CybridApiIdpSwiftAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
            "bank_guid": bankGuid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationListIdpModel>.Type = CybridApiIdpSwiftAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
